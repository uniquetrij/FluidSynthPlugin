# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
        # exclude:
        #   - os: ubuntu-22.04
        #     c_compiler: cl
        
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install APT Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y fluidsynth graphviz libasound2-dev libx11-dev \
                            libxext-dev libtiff-dev libfreetype-dev \
                            libfontconfig1-dev doxygen texlive-latex-base \
                            texlive-fonts-recommended texlive-fonts-extra \
                            texlive-latex-extra 
        
    - name: Install JUCE
      shell: bash
      run: |
        sudo mkdir /Program\ Files
        sudo chmod 777 /Program\ Files -R
        git clone https://github.com/juce-framework/JUCE /Program\ Files/JUCE
    - name: Configure CMake
      run: >
        cmake -B ./build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/buildSetup
    - name: Build
      run: cmake --build ./build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ./build
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Install
      shell: bash
      run: cmake --install ./build --config Release

    - name: Upload Built Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: FluidSynthPlugin.vst3.${{ matrix.os }}
        path: ./_DISTRIBUTION/targetPlatforms/Linux-x86_64/Release/VST3/FluidSynthPlugin.vst3
        retention-days: 7
    
########################################################################################################################

  release:
    name: Create GitHub Release
    needs: build 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download All Built Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Archive Release
      shell: bash 
      run: |
        for dir in ./dist/*/; do 
          tmpdir=$(mktemp -d) 
          cp -r "$dir" "$tmpdir/FluidSynthPlugin.vst3" 
          tar -czf "${dir%/}.tar.gz" -C "$tmpdir" FluidSynthPlugin.vst3 
          rm -rf "$tmpdir" 
        done
        for dir in ./dist/*/; do 
          tmpdir=$(mktemp -d) 
          cp -r "$dir" "$tmpdir/FluidSynthPlugin.vst3" 
          (cd "$tmpdir" && zip -r "${OLDPWD}/${dir%/}.zip" FluidSynthPlugin.vst3) 
          rm -rf "$tmpdir" 
        done
        ls ./dist/
    - name: Get latest tag or use default
      id: get_tag
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
        if [ -z "$latest_tag" ]; then
          echo "No existing tag found. Using v0.1.0 as base version."
          latest_tag="v0.0.0"
        fi
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
    
    - name: Bump patch version
      id: bump_tag
      run: |
        tag="${{ steps.get_tag.outputs.latest_tag }}"
        version=${tag#v}
        IFS='.' read -r major minor patch <<< "$version"
        new_tag="v$major.$minor.$((patch + 1))"
        echo "Bumped tag: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.bump_tag.outputs.new_tag }}
        # release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: ./dist/*

    - name: Show Release URL
      run: echo "Release created at ${{ steps.release.outputs.url }}"
