# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Touch
      shell: bash
      run: |
        mkdir -p ./dist/FluidSynthPlugin.vst3.${{ matrix.os }} 
        touch ./dist/FluidSynthPlugin.vst3.${{ matrix.os }}/hello-${{ matrix.os }}.text

    - name: Upload Built Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: FluidSynthPlugin.vst3.${{ matrix.os }}
        path: ./dist/FluidSynthPlugin.vst3.${{ matrix.os }}
        retention-days: 7
    
########################################################################################################################

  release:
    name: Create GitHub Release
    needs: build 
    runs-on: ubuntu-latest

    steps:
    - name: Download All Built Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Archive Release
      shell: bash 
      run: |
        for dir in ./dist/*/; do tar -czf "${dir%/}.tar.gz" -C "$(dirname "$dir")" "$(basename "$dir")"; done
        for dir in ./dist/*/; do zip -r "${dir%/}.zip" "$dir"; done
        ls ./dist/

    - name: Get latest tag or use default
      id: get_tag
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
        if [ -z "$latest_tag" ]; then
          echo "No existing tag found. Using v0.1.0 as base version."
          latest_tag="v0.0.0"
        fi
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
    
    - name: Bump patch version
      id: bump_tag
      run: |
        tag="${{ steps.get_tag.outputs.latest_tag }}"
        version=${tag#v}
        IFS='.' read -r major minor patch <<< "$version"
        new_tag="v$major.$minor.$((patch + 1))"
        echo "Bumped tag: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.bump_tag.outputs.new_tag }}
        # release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: ./dist/*

    - name: Show Release URL
      run: echo "Release created at ${{ steps.elease.outputs.url }}"
