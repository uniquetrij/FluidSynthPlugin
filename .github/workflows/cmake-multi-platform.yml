# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    outputs:
      build-os: ${{ steps.variables.outputs.build-os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
        # exclude:
        #   - os: ubuntu-22.04
        #     c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update && 
        sudo apt install -y fluidsynth libasound2-dev libx11-dev \
                            libxext-dev libtiff-dev libfreetype-dev \
                            libfontconfig1-dev doxygen texlive-latex-base \
                            texlive-fonts-recommended texlive-fonts-extra \
                            texlive-latex-extra graphviz
        
    - name: Install JUCE
      shell: bash
      run: |
        sudo mkdir /Program\ Files
        sudo chmod 777 /Program\ Files -R
        git clone https://github.com/juce-framework/JUCE /Program\ Files/JUCE

    - name: Set Variables
      id: variables
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-os=${{ matrix.os }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.variables.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/buildSetup

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.variables.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.variables.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Install
      shell: bash
      run: cmake --install ./build --config Release

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.5
      with:
        type: 'zip'
        path: './_DISTRIBUTION/targetPlatforms/Linux-x86_64/Release/VST3/FluidSynthPlugin.vst3'
        filename: 'FluidSynthPlugin.vst3.zip'
      
    - name: Upload Build Artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: FluidSynthPlugin.vst3.${{ matrix.os }}
        path: ./FluidSynthPlugin.vst3.zip
    
########################################################################################################################

  release:
    name: Create GitHub Release
    needs: build 
    runs-on: ubuntu-latest
    env:
      BUILD_OS: ${{ needs.build.outputs.build-os }}

    steps:
    - name: Set Variables
      id: variables
      shell: bash
      run: |
        echo "build-os=$BUILD_OS" >> "$GITHUB_OUTPUT"
      
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: FluidSynthPlugin.vst3.${{ steps.variables.outputs.build-os }}.zip
        path: ./
        
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: ./FluidSynthPlugin.vst3.${{ steps.variables.outputs.build-os }}.zip

    - name: Show Release URL
      run: echo "Release created at ${{ steps.create_release.outputs.url }}"
